group 'click.rashad'
version '1.0.5'

buildscript {
    ext.kotlin_version = '1.3.50'
    ext.ktor_version = '1.2.4'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'application'

sourceCompatibility = 1.8
compileKotlin { kotlinOptions.jvmTarget = "1.8" }
compileTestKotlin { kotlinOptions.jvmTarget = "1.8" }

mainClassName = "click.rashad.alert.hook.Application"

repositories {
    jcenter()
    maven { url "https://jitpack.io" }
}

configurations {
    ktlint
}

dependencies {
    // ktlint
    ktlint "com.pinterest:ktlint:0.34.2"

    // Kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // Ktor
    compile "io.ktor:ktor-gson:$ktor_version"
    
    compile "io.ktor:ktor-server-core:$ktor_version"
    compile "io.ktor:ktor-server-netty:$ktor_version"
    
    compile "io.ktor:ktor-client-core:$ktor_version"
    compile "io.ktor:ktor-client-apache:$ktor_version"
    
    // todo: update locations after stable api
    compile "io.ktor:ktor-locations:$ktor_version"
    compile "io.ktor:ktor-client-logging:$ktor_version"

    // Kotlin Telegram Bot
    compile "io.github.seik.kotlin-telegram-bot:telegram:4.4.0"

    // Logback
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    // Junit
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

distTar.dependsOn clean
distZip.dependsOn clean

task distDocker(dependsOn: distTar) {
    group = 'Distribution'
    description = 'Bundles the project as a docker image distribution.'

    doLast {
        exec {
            workingDir '.'
            commandLine 'sh', '-c', "docker build --build-arg appname=${project.name} " +
                    "--build-arg version=$version -t rashadansari/${project.name}:$version ."
        }
    }
}

task dockerPush(dependsOn: distDocker) {
    group = 'Distribution'
    description = 'Bundles the project as a docker image distribution and push it to docker registry.'

    doLast {
        exec {
            workingDir '.'
            commandLine 'sh', '-c', "docker push rashadansari/${project.name}:$version"
        }
    }
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
}

check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}
